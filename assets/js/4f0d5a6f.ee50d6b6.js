"use strict";(self.webpackChunklucid_docs=self.webpackChunklucid_docs||[]).push([[6129],{90772:e=>{e.exports=JSON.parse('{"label":"architecture","permalink":"/docs/docs/1.2/tags/architecture","allTagsPath":"/docs/docs/1.2/tags","count":2,"items":[{"id":"Contributing/Lucid Chain backend/Lucid Chain backend","title":"Lucid chain backend","description":"In this section we are going to learn how Lucid chain backend is structured. The first thing you can see when you enter the project, is that there are 2 parts very different from each other. The first one is back. This folder contains all backend logic and the integrations with Redmine and ITop. The other one is front, which contains all the frontend. Here you are about to explore back folder in order to understand its content. This is the most complex part of the application. It has a relatively well distributed system that integrates Redmine and ITop tools with an API in order to make them understand and support SCModel and other features. In the following sections we will describe each part.","permalink":"/docs/docs/1.2/Contributing/Lucid Chain backend/"},{"id":"Contributing/Lucid Chain frontend/Lucid Chain frontend","title":"Lucid chain frontend","description":"In this section we are going to learn how lucid chain is structured. The first thing you can see when you enter the project, is that there are 2 parts very different from each other. The first one is back. This folder contains all backend logic and the integrations with Redmine and ITop. The other one is front, which contains all the frontend. Here you are about to explore front folder in order to understand its content. This is relatively easy to understand and it has a clear structure. It is a simple project developed in Svelte. The main part is in src folder. In components we can find all the different frontend reusable and/or complex parts. Some examples are issue tables, piecharts and other artifacts.","permalink":"/docs/docs/1.2/Contributing/Lucid Chain frontend/"}],"unlisted":false}')}}]);