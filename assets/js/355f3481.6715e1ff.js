"use strict";(self.webpackChunklucid_docs=self.webpackChunklucid_docs||[]).push([[48121],{90193:e=>{e.exports=JSON.parse('{"label":"configuration","permalink":"/docs/docs/tags/configuration","allTagsPath":"/docs/docs/tags","count":4,"items":[{"id":"Lucid chain API/Configuration routes/Configuration routes","title":"Configuration routes","description":"In this section you are going to discover all the endpoints related with configuration.","permalink":"/docs/docs/Lucid chain API/Configuration routes/"},{"id":"Features/Configuring tools/Configuring tools","title":"Configuring tools","description":"In this section you will learn how to connect your Lucid chain instance to your Redmine and/or ITop.","permalink":"/docs/docs/Features/Configuring tools/"},{"id":"Contributing/Lucid Chain frontend/Lucid Chain frontend","title":"Lucid chain frontend","description":"In this section we are going to learn how lucid chain is structured. The first thing you can see when you enter the project, is that there are 2 parts very different from each other. The first one is back. This folder contains all backend logic and the integrations with Redmine and ITop. The other one is front, which contains all the frontend. Here you are about to explore front folder in order to understand its content. This is relatively easy to understand and it has a clear structure. It is a simple project developed in Svelte. The main part is in src folder. In components we can find all the different frontend reusable and/or complex parts. Some examples are issue tables, piecharts and other artifacts.","permalink":"/docs/docs/Contributing/Lucid Chain frontend/"},{"id":"Features/Synchronizating a service chain/Synchronizating a service chain","title":"Synchronizating a service chain","description":"In this section you will learn how to synchronize your current service chain in ITop and/or Redmine.","permalink":"/docs/docs/Features/Synchronizating a service chain/"}],"unlisted":false}')}}]);