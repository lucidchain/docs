"use strict";(self.webpackChunklucid_docs=self.webpackChunklucid_docs||[]).push([[7147],{6368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(5893),s=n(1151);const a={sidebar_position:3},o="Frontend",i={id:"structure/frontend",title:"Frontend",description:"The frontend is very easy to understand. It is a simple project developed in Svelte. The main part is in src folder. In components we can find all the different frontend reusable and/or complex parts. Some examples are issue tables, piecharts and other artifacts.",source:"@site/docs/structure/frontend.md",sourceDirName:"structure",slug:"/structure/frontend",permalink:"/docs/docs/structure/frontend",draft:!1,unlisted:!1,editUrl:"https://github.com/lucidchain/docs/tree/main/packages/create-docusaurus/templates/shared/docs/structure/frontend.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Backend",permalink:"/docs/docs/structure/backend"},next:{title:"Features",permalink:"/docs/docs/category/features"}},d={},c=[];function l(e){const t={em:"em",h1:"h1",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"frontend",children:"Frontend"}),"\n",(0,r.jsxs)(t.p,{children:["The frontend is very easy to understand. It is a simple project developed in Svelte. The main part is in ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"src"})})," folder. In ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"components"})})," we can find all the different frontend reusable and/or complex parts. Some examples are issue tables, piecharts and other artifacts."]}),"\n",(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"routes"})}),' we can find the screens and navigation structure. Svelte assigns each folder to a word between slashes in the browser, which creates a route. For example, if we have the folders docs/example, that means that the route "/docs/example" exists in the app. Inside every folder we can find the exact same name for every file, which is ',(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"+page.svelte"})}),". This allows the framework to create routes and associate them to screens in a dynamic and confortable way."]}),"\n",(0,r.jsx)(t.p,{children:"There are folders that have special meaning. If you see any folder named between brackets, that means it is an url param. For example, the folder name [target] is refering to an url param, in this case, target."}),"\n",(0,r.jsx)(t.p,{children:"Let's see a full example for a better understanding:"}),"\n",(0,r.jsx)(t.p,{children:"There are 3 folders:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"routes"}),"\n",(0,r.jsx)(t.li,{children:"routes/export"}),"\n",(0,r.jsx)(t.li,{children:"routes/export/[target]"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["This means that in the app there is an url corresponding to the route /export/",":target"]}),"\n",(0,r.jsxs)(t.p,{children:["Let's supose that there is a file called ",(0,r.jsx)(t.strong,{children:"+page.svelte"})," inside [target] folder. That means that when the user goes to /export/",":target",", he will find the screen defined in that +page.svelte file."]}),"\n",(0,r.jsx)(t.p,{children:"In this case, the user will find the same page whatever taget value is. In lucid chain case, this means that /export/itop and /export/redmine will lead to the same screen."})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var r=n(7294);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);